webpackHotUpdate(0,{

/***/ "../../../../../../scripts/frontend/scrollTransformImage/index.js":
/*!******************************************************************************!*\
  !*** E:/Work/ehabana2/assets/scripts/frontend/scrollTransformImage/index.js ***!
  \******************************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n* demo.js\n* http://www.codrops.com\n*\n* Licensed under the MIT license.\n* http://www.opensource.org/licenses/mit-license.php\n* \n* Copyright 2019, Codrops\n* http://www.codrops.com\n*/\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n    // helper functions\n    var MathUtils = {\n        // map number x from range [a, b] to [c, d]\n        map: function map(x, a, b, c, d) {\n            return (x - a) * (d - c) / (b - a) + c;\n        },\n        // linear interpolation\n        lerp: function lerp(a, b, n) {\n            return (1 - n) * a + n * b;\n        },\n        // Random float\n        getRandomFloat: function getRandomFloat(min, max) {\n            return (Math.random() * (max - min) + min).toFixed(2);\n        }\n    };\n\n    // body element\n    var body = document.body;\n\n    // calculate the viewport size\n    var winsize = void 0;\n    var calcWinsize = function calcWinsize() {\n        return winsize = { width: window.innerWidth, height: window.innerHeight };\n    };\n    calcWinsize();\n    // and recalculate on resize\n    window.addEventListener('resize', calcWinsize);\n\n    // scroll position\n    var docScroll = void 0;\n    // for scroll speed calculation\n    var lastScroll = void 0;\n    var scrollingSpeed = 0;\n    // scroll position update function\n    var getPageYScroll = function getPageYScroll() {\n        return docScroll = window.pageYOffset || document.documentElement.scrollTop;\n    };\n    window.addEventListener('scroll', getPageYScroll);\n\n    // Item\n\n    var Item = function () {\n        function Item(el) {\n            var _this = this;\n\n            _classCallCheck(this, Item);\n\n            // the .item element\n            this.DOM = { el: el };\n            console.log(this.DOM);\n            // the inner image\n            this.DOM.image = this.DOM.el.querySelector('img');\n            this.DOM.imageWrapper = this.DOM.image.parentNode;\n            //this.DOM.title = this.DOM.el.querySelector('.content__item-title');\n            this.renderedStyles = {\n                // here we define which property will change as we scroll the page and the item is inside the viewport\n                // in this case we will be:\n                // - scaling the inner image\n                // - translating the item's title\n                // we interpolate between the previous and current value to achieve a smooth effect\n                imageScale: {\n                    // interpolated value\n                    previous: 0,\n                    // current value\n                    current: 0,\n                    // amount to interpolate\n                    ease: 0.1,\n                    // current value setter\n                    setValue: function setValue() {\n                        var toValue = 1.5;\n                        var fromValue = 1;\n                        var val = MathUtils.map(_this.props.top - docScroll, winsize.height, -1 * _this.props.height, fromValue, toValue);\n                        return Math.max(Math.min(val, toValue), fromValue);\n                    }\n                }\n                /*\n                titleTranslationY: {\n                    previous: 0, \n                    current: 0, \n                    ease: 0.1,\n                    fromValue: Number(MathUtils.getRandomFloat(30,400)),\n                    setValue: () => {\n                        const fromValue = this.renderedStyles.titleTranslationY.fromValue;\n                        const toValue = -1*fromValue;\n                        const val = MathUtils.map(this.props.top - docScroll, winsize.height, -1 * this.props.height, fromValue, toValue);\n                        return fromValue < 0 ? Math.min(Math.max(val, fromValue), toValue) : Math.max(Math.min(val, fromValue), toValue);\n                    }\n                }\n                */\n            };\n            // gets the item's height and top (relative to the document)\n            this.getSize();\n            // set the initial values\n            this.update();\n            // use the IntersectionObserver API to check when the element is inside the viewport\n            // only then the element styles will be updated\n            this.observer = new IntersectionObserver(function (entries) {\n                entries.forEach(function (entry) {\n                    return _this.isVisible = entry.intersectionRatio > 0;\n                });\n            });\n            this.observer.observe(this.DOM.el);\n            // init/bind events\n            this.initEvents();\n        }\n\n        _createClass(Item, [{\n            key: 'update',\n            value: function update() {\n                // sets the initial value (no interpolation)\n                for (var key in this.renderedStyles) {\n                    this.renderedStyles[key].current = this.renderedStyles[key].previous = this.renderedStyles[key].setValue();\n                }\n                // apply changes/styles\n                this.layout();\n            }\n        }, {\n            key: 'getSize',\n            value: function getSize() {\n                var rect = this.DOM.el.getBoundingClientRect();\n                this.props = {\n                    // item's height\n                    height: rect.height,\n                    // offset top relative to the document\n                    top: docScroll + rect.top\n                };\n            }\n        }, {\n            key: 'initEvents',\n            value: function initEvents() {\n                var _this2 = this;\n\n                window.addEventListener('resize', function () {\n                    return _this2.resize();\n                });\n            }\n        }, {\n            key: 'resize',\n            value: function resize() {\n                // gets the item's height and top (relative to the document)\n                this.getSize();\n                // on resize reset sizes and update styles\n                this.update();\n            }\n        }, {\n            key: 'render',\n            value: function render() {\n                // update the current and interpolated values\n                for (var key in this.renderedStyles) {\n                    this.renderedStyles[key].current = this.renderedStyles[key].setValue();\n                    this.renderedStyles[key].previous = MathUtils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].ease);\n                }\n\n                // and apply changes\n                this.layout();\n            }\n        }, {\n            key: 'layout',\n            value: function layout() {\n                console.log(\" scale the image..|\");\n                this.DOM.image.style.transform = 'scale3d(' + this.renderedStyles.imageScale.previous + ',' + this.renderedStyles.imageScale.previous + ',1)';\n                // translate the title\n                //  this.DOM.title.style.transform = `translate3d(0,${this.renderedStyles.titleTranslationY.previous}px,0)`;\n            }\n        }]);\n\n        return Item;\n    }();\n\n    // SmoothScroll\n\n\n    var SmoothScroll = function () {\n        function SmoothScroll() {\n            var _this3 = this;\n\n            _classCallCheck(this, SmoothScroll);\n\n            // the <main> element\n            this.DOM = { main: document.querySelector('body') };\n            // the scrollable element\n            // we translate this element when scrolling (y-axis)\n            this.DOM.scrollable = this.DOM.main.querySelector('main[data-scroll]');\n            // the items on the page\n            this.items = [];\n            this.DOM.content = this.DOM.main.querySelector('section');\n            [].concat(_toConsumableArray(this.DOM.content.querySelectorAll('.animated-img-container'))).forEach(function (item) {\n                return _this3.items.push(new Item(item));\n            });\n            // here we define which property will change as we scroll the page\n            // in this case we will be translating on the y-axis\n            // we interpolate between the previous and current value to achieve the smooth scrolling effect\n            this.renderedStyles = {\n                translationY: {\n                    // interpolated value\n                    previous: 0,\n                    // current value\n                    current: 0,\n                    // amount to interpolate\n                    ease: 0.1,\n                    // current value setter\n                    // in this case the value of the translation will be the same like the document scroll\n                    setValue: function setValue() {\n                        return docScroll;\n                    }\n                }\n            };\n            // set the body's height\n            this.setSize();\n            // set the initial values\n            this.update();\n            // the <main> element's style needs to be modified\n            this.style();\n            // init/bind events\n            this.initEvents();\n            // start the render loop\n            requestAnimationFrame(function () {\n                return _this3.render();\n            });\n        }\n\n        _createClass(SmoothScroll, [{\n            key: 'update',\n            value: function update() {\n                // sets the initial value (no interpolation) - translate the scroll value\n                for (var key in this.renderedStyles) {\n                    this.renderedStyles[key].current = this.renderedStyles[key].previous = this.renderedStyles[key].setValue();\n                }\n                // translate the scrollable element\n                this.layout();\n            }\n        }, {\n            key: 'layout',\n            value: function layout() {\n                this.DOM.scrollable.style.transform = 'translate3d(0,' + -1 * this.renderedStyles.translationY.previous + 'px,0)';\n            }\n        }, {\n            key: 'setSize',\n            value: function setSize() {\n                // set the heigh of the body in order to keep the scrollbar on the page\n                body.style.height = this.DOM.scrollable.scrollHeight + 'px';\n            }\n        }, {\n            key: 'style',\n            value: function style() {\n                // the <main> needs to \"stick\" to the screen and not scroll\n                // for that we set it to position fixed and overflow hidden \n                this.DOM.main.style.position = 'fixed';\n                this.DOM.main.style.width = this.DOM.main.style.height = '100%';\n                this.DOM.main.style.top = this.DOM.main.style.left = 0;\n                this.DOM.main.style.overflow = 'hidden';\n            }\n        }, {\n            key: 'initEvents',\n            value: function initEvents() {\n                var _this4 = this;\n\n                // on resize reset the body's height\n                window.addEventListener('resize', function () {\n                    return _this4.setSize();\n                });\n            }\n        }, {\n            key: 'render',\n            value: function render() {\n                var _this5 = this;\n\n                // Get scrolling speed\n                // Update lastScroll\n                scrollingSpeed = Math.abs(docScroll - lastScroll);\n                lastScroll = docScroll;\n\n                // update the current and interpolated values\n                for (var key in this.renderedStyles) {\n                    this.renderedStyles[key].current = this.renderedStyles[key].setValue();\n                    this.renderedStyles[key].previous = MathUtils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].ease);\n                }\n                // and translate the scrollable element\n                this.layout();\n\n                // for every item\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = this.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var item = _step.value;\n\n                        // if the item is inside the viewport call it's render function\n                        // this will update item's styles, based on the document scroll value and the item's position on the viewport\n                        if (item.isVisible) {\n                            if (item.insideViewport) {\n                                item.render();\n                            } else {\n                                item.insideViewport = true;\n                                item.update();\n                            }\n                        } else {\n                            item.insideViewport = false;\n                        }\n                    }\n\n                    // loop..\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                requestAnimationFrame(function () {\n                    return _this5.render();\n                });\n            }\n        }]);\n\n        return SmoothScroll;\n    }();\n\n    /***********************************/\n    /********** Preload stuff **********/\n\n    // Get the scroll position and update the lastScroll variable\n\n\n    getPageYScroll();\n    lastScroll = docScroll;\n    // Initialize the Smooth Scrolling\n    new SmoothScroll();\n    console.log(\"scrollTransform\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../../../scripts/frontend/scrollTransformImage/index.js\n");

/***/ })

})