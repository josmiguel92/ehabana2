security:
    encoders:
      Symfony\Component\Security\Core\User\User:
        algorithm: auto

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
          memory:
            users:
              admin:
                password: $argon2i$v=19$m=65536,t=4,p=1$dFA0NXF0YWFhUEpXdUt0cg$PghxUQ9TEXhvH2QqZtheVT/oMbXw+DYEDfbIJCoGrTM
                roles: ['ROLE_USER', 'ROLE_ADMIN']

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: false
            provider: in_memory

#            logout:       true
#            guard:
#                authenticators:
#                    - App\Security\Authenticator
            #guard:
            #    authenticators:
            #       - App\Security\LoginFormAuthenticationAuthenticator

            # activate different ways to authenticate

            http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/backend, roles: ROLE_ADMIN, requires_channel: '%required_channel%' }
        - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: '%required_channel%' }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%required_channel%'}
        # - { path: ^/profile, roles: ROLE_USER }
